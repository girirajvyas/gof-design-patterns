(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{61:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return s}));var r=a(2),n=a(6),i=(a(0),a(89)),c={id:"doc3",title:"Builder Pattern"},l={unversionedId:"doc3",id:"doc3",isDocsHomePage:!1,title:"Builder Pattern",description:"- GoF: Separate the construction of a complex object from its representation so that the same construction process can create different representations.",source:"@site/docs\\doc3.md",permalink:"/gof-design-patterns/docs/doc3",sidebar:"someSidebar",previous:{title:"Singleton Pattern",permalink:"/gof-design-patterns/docs/doc2"},next:{title:"Prototype Pattern",permalink:"/gof-design-patterns/docs/doc4"}},o=[{value:"Concepts",id:"concepts",children:[]},{value:"Design considerations",id:"design-considerations",children:[]},{value:"Example/Demo",id:"exampledemo",children:[]},{value:"Drawbacks",id:"drawbacks",children:[]},{value:"Contrast to other patterns",id:"contrast-to-other-patterns",children:[]},{value:"Summary",id:"summary",children:[]},{value:"Next",id:"next",children:[]}],b={rightToc:o};function s(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"GoF"),": Separate the construction of a complex object from its representation so that the same construction process can create different representations."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Wiki"),": The builder pattern is a design pattern designed to provide a flexible solution to various object creation problems in object-oriented programming. The intent of the Builder design pattern is to separate the construction of a complex object from its representation "),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Other"),": This a pattern people often use but rarely create of there own. This pattern deals with construction of Objects with lot of parameters and want to make the object once we are done constructing it.")),Object(i.b)("h2",{id:"concepts"},"Concepts"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Handles complex constructors"),Object(i.b)("li",{parentName:"ul"},"Large number of parameters"),Object(i.b)("li",{parentName:"ul"},"Immutability"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Examples:"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"StringBuilder"),Object(i.b)("li",{parentName:"ul"},"DocumentBuilder"),Object(i.b)("li",{parentName:"ul"},"Locale.Builder")))),Object(i.b)("h2",{id:"design-considerations"},"Design considerations"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Flexibility over telescoping constructors"),Object(i.b)("li",{parentName:"ul"},"Generally implemented with static inner class"),Object(i.b)("li",{parentName:"ul"},"Calls appropriate constructor"),Object(i.b)("li",{parentName:"ul"},"Negates the need for exposed setters"),Object(i.b)("li",{parentName:"ul"},"Java 1.5+ can take advantage of generics ***")),Object(i.b)("h2",{id:"exampledemo"},"Example/Demo"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Demonstrate exposed setters (LunchOrderBean.java / LunchOrderBeanDemo.java)"),Object(i.b)("li",{parentName:"ul"},"Demonstrate Telescoping constructors (LunchOrderTelescopic.java / LunchOrderTelescopicDemo.java)"),Object(i.b)("li",{parentName:"ul"},"Create Builder (LunchOrder.java / LunchOrderDemo.java)"),Object(i.b)("li",{parentName:"ul"},"Build out example")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Steps to create:")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Create a class which is supposed to have many fields and required immutable instance"),Object(i.b)("li",{parentName:"ul"},"Decalre all fields as final, so that they can only be initialized in constructor"),Object(i.b)("li",{parentName:"ul"},"Create a public static builder inner class"),Object(i.b)("li",{parentName:"ul"},"Copy all the field declarations in the inner class without making them final (In case you make field inside inner class as final you have to initialize that in constructor else you will ahve compilation error)"),Object(i.b)("li",{parentName:"ul"},"Create a public default constructor in Builder class (you can put any parameters here to make them mandatory)"),Object(i.b)("li",{parentName:"ul"},"Now, create methods taking field type as input and returning complete instance after setting that. for example",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"})," public Builder bread(String bread) {\n    this.bread = bread;\n    return this;\n }\n"))),Object(i.b)("li",{parentName:"ul"},"Create a private constructor in Outer class that takes this Builder class and sets all the fields from the builder instance.",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"  private LunchOrder(Builder builder) {\n      this.bread = builder.bread;\n      this.condiments = builder.condiments;\n      this.dressing = builder.dressing;\n      this.meat = builder.meat;\n  }\n"))),Object(i.b)("li",{parentName:"ul"},"Create a build method that will return the instance of Outer class. This is achieved by passing this builder instance to the outer class constructor",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"  public LunchOrder build() {\n     return new LunchOrder(this);\n  }\n"))),Object(i.b)("li",{parentName:"ul"},"You can test the above builder as:",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'  LunchOrder.Builder builder = new LunchOrder.Builder(); \n  builder.bread("bread").condiments("condiments").dressing("dressing").meat("meat");\n  LunchOrder lunchOrder = builder.build();\n'))),Object(i.b)("li",{parentName:"ul"},"Done  ")),Object(i.b)("h2",{id:"drawbacks"},"Drawbacks"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Immutable objects are created"),Object(i.b)("li",{parentName:"ul"},"Inner static class is generally used for implementation"),Object(i.b)("li",{parentName:"ul"},"It is always Designed first "),Object(i.b)("li",{parentName:"ul"},"Adds complexity, as people are not comfortable with object returning itself with each subsequent call")),Object(i.b)("h2",{id:"contrast-to-other-patterns"},"Contrast to other patterns"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Builder"),Object(i.b)("th",Object(r.a)({parentName:"tr"},{align:"center"}),"Prototype"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Handles complex constructors"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"Implemented around a clone")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"No interface required"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"Avoids calling complex constructors")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Can be a saperate class"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"NA")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"Works with a legacy code"),Object(i.b)("td",Object(r.a)({parentName:"tr"},{align:"center"}),"Difficult to implement in legacy code")))),Object(i.b)("h2",{id:"summary"},"Summary"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Creative way to deal with complexity"),Object(i.b)("li",{parentName:"ul"},"Easy to implement"),Object(i.b)("li",{parentName:"ul"},"few drawbacks"),Object(i.b)("li",{parentName:"ul"},"can refactor in with a saperate class (typically implemented with a static inner class)")),Object(i.b)("h2",{id:"next"},"Next"),Object(i.b)("p",null,"Explore the Generics version of builder pattern"))}s.isMDXComponent=!0},89:function(e,t,a){"use strict";a.d(t,"a",(function(){return u})),a.d(t,"b",(function(){return m}));var r=a(0),n=a.n(r);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var b=n.a.createContext({}),s=function(e){var t=n.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},d=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),u=s(a),d=r,m=u["".concat(c,".").concat(d)]||u[d]||p[d]||i;return a?n.a.createElement(m,l(l({ref:t},b),{},{components:a})):n.a.createElement(m,l({ref:t},b))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,c=new Array(i);c[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var b=2;b<i;b++)c[b]=a[b];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);